# ===================================
# .gitignore para RAG Treinos
# Sistema RAG com Flask e Ollama
# ===================================

# ===================================
# PYTHON
# ===================================

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# ===================================
# RAG TREINOS - ARQUIVOS ESPECÍFICOS
# ===================================

# Vector Stores (podem ser grandes, regenerar se necessário)
vectorstore_faiss/
vectorstore_chroma/
*.faiss
*.pkl

# Cache de embeddings
.cache/
embeddings_cache/

# Dados de feedback (podem conter dados sensíveis)
feedback*.json
feedback*.csv
user_data/

# Logs do sistema
logs/
*.log
rag_system.log
flask.log
server.log

# Relatórios gerados
relatorio_*.txt
#relatorio_*.pdf
export_*.json
backup_*.json

# Arquivos temporários do RAG
temp_chunks/
temp_embeddings/
*.tmp
*.temp

# ===================================
# DOCUMENTOS (OPCIONAL)
# ===================================

# Descomentar se você NÃO quiser versionar os documentos
# documentos_treino/
# *.pdf
# *.docx
# *.doc

# Manter apenas documentos de exemplo
documentos_treino/*.pdf
documentos_treino/*.docx
documentos_treino/*.doc
!documentos_treino/exemplo_*.pdf
!documentos_treino/README.md

# ===================================
# FLASK / WEB
# ===================================

# Flask session files
flask_session/

# Static files gerados
static/dist/
static/build/

# Upload temporários
uploads/
temp_uploads/

# Cache do navegador
.cache/

# ===================================
# DADOS E CONFIGURAÇÕES SENSÍVEIS
# ===================================

# Arquivos de configuração com senhas/tokens
config_prod.py
secrets.py
.secrets
api_keys.txt

# Banco de dados local (se usar)
*.db
*.sqlite
*.sqlite3
database/

# Backup e dumps
backup/
dumps/
*.dump
*.sql

# ===================================
# SISTEMA OPERACIONAL
# ===================================

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# ===================================
# IDEs E EDITORES
# ===================================

# VSCode
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
!.vscode/*.code-snippets
.history/
*.vsix

# PyCharm
.idea/
*.iws
*.iml
*.ipr

# Sublime Text
*.tmlanguage.cache
*.tmPreferences.cache
*.stTheme.cache
*.sublime-workspace
*.sublime-project

# Vim
*~
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# ===================================
# NODE.JS (se usar frontend)
# ===================================

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Dependency directories
node_modules/
jspm_packages/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache (https://parceljs.org/)
.parcel-cache

# ===================================
# MACHINE LEARNING / AI
# ===================================

# Modelos grandes (baixar via script)
models/
*.model
*.bin
*.h5
*.onnx
*.pb

# Datasets grandes
datasets/
data/raw/
data/processed/
*.parquet
*.feather

# Checkpoints de treinamento
checkpoints/
runs/
wandb/

# ===================================
# DOCKER
# ===================================

# Docker
.dockerignore
Dockerfile.dev
docker-compose.override.yml
.docker/

# ===================================
# FERRAMENTAS DE BUILD
# ===================================

# Webpack
webpack-stats.json

# Sass
.sass-cache/
*.css.map
*.sass.map
*.scss.map

# ===================================
# ARQUIVOS DE TESTE E DEBUG
# ===================================

# Arquivos de teste temporários
test_output/
test_*.json
debug_*.txt
*.debug

# Perfiling
*.prof
profile_results/

# ===================================
# OLLAMA E LLMs LOCAIS
# ===================================

# Cache do Ollama (se local)
.ollama/
ollama_cache/

# Modelos baixados localmente (muito grandes)
local_models/
*.gguf
*.ggml

# ===================================
# BACKUP E VERSIONING
# ===================================

# Arquivos de backup
*.bak
*.backup
*.old
*_backup
*_old

# Patches
*.patch
*.diff

# ===================================
# ARQUIVOS DE EXEMPLO E DOCUMENTAÇÃO
# ===================================

# Manter arquivos de exemplo importantes
!exemplo_*.py
!sample_*.txt
!README.md
!LICENSE
!.gitignore
!requirements.txt

# ===================================
# CUSTOM - ADICIONE SEUS ARQUIVOS
# ===================================

# Adicione aqui arquivos específicos do seu projeto
# que devem ser ignorados

# Arquivos pessoais
notas_pessoais.md
todo.txt
rascunhos/

# Configurações locais
local_config.py
dev_settings.py

# ===================================
# COMENTÁRIOS PARA REFERÊNCIA
# ===================================

# Para forçar inclusão de um arquivo ignorado:
# !arquivo_importante.txt

# Para ignorar tudo exceto alguns arquivos:
# *
# !README.md
# !*.py

# Para ignorar arquivos apenas na raiz:
# /arquivo_raiz.txt

# Para ignorar pastas específicas:
# pasta_específica/